#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

//1 for bulb on; 0 for bulb off
uniform int bulbOn;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // ambient
  vec3 ambient = light.ambient * material.ambient;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse);

  // specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);

  vec3 result = ambient + diffuse + specular;
  return result;
}

void main() {
   vec3 bulbColorWhenOn = vec3(1.0, 1.0, 0.0); // yellow
   vec3 bulbColorWhenOff = vec3(0.0); // black

   vec3 norm = normalize(aNormal);
     vec3 viewDir = normalize(viewPos - aPos);

   vec3 finalColor;

   if (bulbOn == 1) {
      finalColor = bulbColorWhenOn;
   } else {
      //finalColor = bulbColorWhenOff;
      finalColor = vec3(0.0);
        for(int i = 0; i < numLights-1; i++)
          finalColor += CalcPointLight(lights[i], norm, aPos, viewDir);
   }

   fragColor = vec4(finalColor, 1.0);
}